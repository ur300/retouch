{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/themes.js","../../src/stores.js","../../src/comp/GalleryNav.svelte","../../src/comp/Gallery.svelte","../../src/comp/Project.svelte","../../src/lib/router.js","../../src/App.svelte","../../src/index.js","../../src/gallery-config.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export const themes = [\n    {\n      name: 'light',\n      colors: {\n        hoverColor: '#28B391',\n        mainFontColor: '#000',\n        mainFF: 'Helvetica, Arial, sans-serif',\n        lWidth: '1106px'\n      },\n    },\n    {\n      name: 'dark',\n      colors: {\n        \n      },\n    }\n];","import { writable } from 'svelte/store';\n\nexport const hoveredProject = writable(-1);","<script>\n    import { getContext, onDestroy } from 'svelte';\n    import { hoveredProject } from '../stores.js';\n    const gallery = getContext('gallery');\n\n    function setHoveredProject(id) {\n        hoveredProject.set(id);\n    }\n\n    let hoverIndex = -1;\n\n\tconst unsubscribe = hoveredProject.subscribe(value => {\n\t\thoverIndex = value;\n    });\n    \n    onDestroy(unsubscribe);\n</script>\n\n<div class=\"side-nav\" >\n    <ul>\n        {#each gallery as folder, i}\n            <li>\n                <a href='/#/gallery/{folder.id}' \n                   class='gallery-nav__item {hoverIndex === i ? \"hovered\" : \"\"}' \n                   on:mouseover={() => setHoveredProject(i)}\n                   on:mouseleave={() => setHoveredProject(-1)}>\n                    <span>{folder.id}</span>\n                </a>\n                \n            </li>\n        {/each}\n    </ul>\n</div>\n\n<style type=\"text/scss\">\n    .side-nav {\n        width:225px;\n        ul {\n            padding: 0;\n            margin: 0;\n            list-style: none;\n            li {\n                padding-bottom: 20px;\n            }\n        }\n    }\n\n    .gallery-nav {\n        &__item {\n            text-decoration: none;\n            transition: color 0.3s ease;\n            \n            span {\n                text-align: center;\n                transition: background-color 0.3s ease;\n                position: relative;\n                padding: 1px 2px;\n                &:after{\n                    position: absolute;\n                    top: 0;\n                    right: -.25rem;\n                    bottom: 1px;\n                    left: -.25rem;\n                    z-index: -1;\n                    content: \"\";\n                    background: var(--theme-hoverColor);\n                    border-radius: .3em;\n                    opacity: .5;\n                    transition: all .2s;\n                    transform: scaleY(.06);\n                    transform-origin: 0 100% 0;\n                }\n            }\n            \n            &:hover, &.hovered {\n                span {\n                    &:after {\n                        transform: none;\n                    }\n                }\n            }\n        }\n    }\n</style>","<script>\n    import { getContext, onDestroy } from 'svelte';\n    import { hoveredProject } from '../stores.js';\n    const gallery = getContext('gallery');\n\n    function setHoveredProject(id) {\n        hoveredProject.set(id); \n    }\n\n    let hoverIndex = -1;\n    hoveredProject.set(hoverIndex);\n    \n\tconst unsubscribe = hoveredProject.subscribe(value => {\n\t\thoverIndex = value;\n    });\n\n    onDestroy(unsubscribe);\n</script>\n\n<div class='right-col'>\n    <div id='gallery-view' class='gallery d-flex'>\n        {#each gallery as folder, i}\n            <a href='/#/gallery/{folder.id}' \n               class='gallery__item {hoverIndex === i ? \"hovered\" : \"\"}' \n               on:mouseover={() => setHoveredProject(i)}\n               on:mouseleave={() => setHoveredProject(-1)}>\n                <img src=\"img/{folder.id}/000.jpg\" alt=\"{folder.id}\">\n                <span>{folder.id}</span>\n            </a>\n        {/each}\n    </div>\n</div>\n\n<style type='text/scss'>\n    .gallery {\n        flex:1;\n        flex-wrap: wrap;\n        &__item {\n            width: 50%;\n            flex-grow: 1;\n            text-decoration: none;\n            padding-right: 68PX;\n            box-sizing: border-box;\n            margin-bottom: 35px;\n            text-align: center;\n            span {\n                text-align: center;\n                transition: background-color 0.3s ease;\n                position: relative;\n                padding: 1px 2px;\n                &:after{\n                    position: absolute;\n                    top: 0;\n                    right: -.25rem;\n                    bottom: 1px;\n                    left: -.25rem;\n                    z-index: -1;\n                    content: \"\";\n                    background: var(--theme-hoverColor);\n                    border-radius: .3em;\n                    opacity: .5;\n                    transition: all .2s;\n                    transform: scaleY(.06);\n                    transform-origin: 0 100% 0;\n                }\n            }\n            img {\n                transition: transform 0.3s ease;\n                max-width: 100%;\n            }\n\n            &:hover, &.hovered {\n                span {\n                    &:after {\n                        transform: none;\n                    }\n                }\n            }\n        }\n    }\n\n    .right-col {\n        flex:1;\n        flex-wrap: wrap;\n        padding-right: 100Px;\n        position: relative;\n        justify-content: flex-end;\n    }\n\n    .project-view {\n        flex:1;\n        flex-wrap: wrap;\n        max-width: 100%;\n        padding-right: 168Px;\n        display: none;\n        img {\n            max-width: 100%;\n            display: block;\n            margin-bottom: 30Px;\n        }\n    }\n\n    .project-nav {\n        position: sticky;\n        top: 0;\n        right: 0;\n        z-index: 99;\n        transform: translate3d(110Px, 72Px, 0);\n        a {\n            text-align: center;\n            background: none;\n            outline: none;\n            border: none;\n            -webkit-appearance: none;\n            font-size: 22Px;\n            display: block;\n            transition: color 0.3s ease;\n            &:hover, &:focus {\n                outline: none;\n            }\n            &:hover{\n                cursor: pointer;\n                color: var(--theme-hoverColor);\n            }\n        }\n    }\n</style>                    ","<script>\n    import { getContext } from 'svelte';\n    const gallery = getContext('gallery');\n    import { hoveredProject } from '../stores.js';\n    export let params;\n    $: project = gallery ? gallery.find(el => el.id === params) : '';\n    $: index = gallery.indexOf(project);\n    $: prevFolder = gallery[0].id;\n    $: nextFolder = gallery[0].id;\n    $: if (index === 0) {\n        prevFolder = '';\n        nextFolder = gallery[index+1].id;\n    }\n    else if (index === (gallery.length - 1)){\n        prevFolder = gallery[index-1].id;\n        nextFolder = '';\n    }\n    else {\n        prevFolder = gallery[index-1].id;\n        nextFolder = gallery[index+1].id;\n    }\n\n    $: hoveredProject.set(index);\n</script>\n\n<section class='project-view'>\n    {#each project.pics as img}\n        <img src=\"img/{project.id}/{img}.jpg\" alt=\"{project.id}\">\n    {/each}\n</section>  \n\n<span class='project-nav'> \n    <a class='scroll-top-btn' href='/#/gallery/{prevFolder}'>\n        <i class='fas fa-chevron-up'></i>\n    </a>\n    <a class='close-btn' href='/#/gallery/'>\n        <i class='fas fa-times'></i>\n    </a>\n    <a class='scroll-top-btn' href='/#/gallery/{nextFolder}'>\n        <i class='fas fa-chevron-down'></i>\n    </a>\n</span>\n\n<style type='text/scss'>\n    .project-view {\n        flex:1;\n        flex-wrap: wrap;\n        max-width: 100%;\n        padding-right: 168Px;\n        img {\n            max-width: 100%;\n            display: block;\n            margin-bottom: 30Px;\n        }\n    }\n\n    \n    .project-nav {\n        position: sticky;\n        position: -webkit-sticky;\n        top: 0;\n        right: 0;\n        z-index: 99;\n        align-self: flex-start;\n        a {\n            text-align: center;\n            background: none;\n            outline: none;\n            border: none;\n            -webkit-appearance: none;\n            font-size: 22Px;\n            display: block;\n            transition: color 0.3s ease;\n            &:hover, &:focus {\n                outline: none;\n            }\n            &:hover{\n                cursor: pointer;\n                color: var(--hoverColor);\n            }\n        }\n    }\n</style>","class Router {\n\troutes = [];\n  \n\tmode = null;\n  \n\troot = '/';\n  \n\tconstructor(options) {\n\t  this.mode = window.history.pushState ? 'history' : 'hash';\n\t  if (options.mode) this.mode = options.mode;\n\t  if (options.root) this.root = options.root;\n\t  this.listen();\n\t}\n  \n\tadd = (path, cb) => {\n\t  this.routes.push({ path, cb });\n\t  return this;\n\t};\n  \n\tremove = path => {\n\t  for (let i = 0; i < this.routes.length; i += 1) {\n\t\tif (this.routes[i].path === path) {\n\t\t  this.routes.slice(i, 1);\n\t\t  return this;\n\t\t}\n\t  }\n\t  return this;\n\t};\n  \n\tflush = () => {\n\t  this.routes = [];\n\t  return this;\n\t};\n  \n\tclearSlashes = path =>\n\t  path\n\t\t.toString()\n\t\t.replace(/\\/$/, '')\n\t\t.replace(/^\\//, '');\n  \n\tgetFragment = () => {\n\t  let fragment = '';\n\t  if (this.mode === 'history') {\n\t\tfragment = this.clearSlashes(decodeURI(window.location.pathname + window.location.search));\n\t\tfragment = fragment.replace(/\\?(.*)$/, '');\n\t\tfragment = this.root !== '/' ? fragment.replace(this.root, '') : fragment;\n\t  } else {\n\t\tconst match = window.location.href.match(/#(.*)$/);\n\t\tfragment = match ? match[1] : '';\n\t  }\n\t  return this.clearSlashes(fragment);\n\t};\n  \n\tnavigate = (path = '') => {\n\t  if (this.mode === 'history') {\n\t\twindow.history.pushState(null, null, this.root + this.clearSlashes(path));\n\t  } else {\n\t\twindow.location.href = `${window.location.href.replace(/#(.*)$/, '')}#${path}`;\n\t  }\n\t  return this;\n\t};\n  \n\tlisten = () => {\n\t  clearInterval(this.interval);\n\t  this.interval = setInterval(this.interval, 50);\n\t};\n  \n\tinterval = () => {\n\t  if (this.current === this.getFragment()) return;\n\t  this.current = this.getFragment();\n\n\t  this.routes.some(route => {\n\t\tconst match = this.current.match(route.path);\n\t\tif (match) {\n\t\t  match.shift();\n\t\t  route.cb.apply({}, match);\n\t\t  return match;\n\t\t}\n\t\treturn false;\n\t  });\n\t};\n}\n  \nexport default Router;","<script>\n\timport Head from './comp/Head.svelte';\n\timport Header from './comp/Header.svelte';\n\timport { setContext, onMount } from 'svelte';\n\timport { writable } from 'svelte/store';\n\timport { themes as _themes } from './themes.js';\n\timport GalleryNav from './comp/GalleryNav.svelte';\n\timport GalleryView from './comp/Gallery.svelte';\n\timport ProjectView from './comp/Project.svelte';\n\timport Router from './lib/router';\n\texport let gallery;\n    \n\tlet themes = [..._themes];\n\tlet _current = 'light';\n\tlet page, projectId, hoverIndex;\n\n\tconst getCurrentTheme = name => themes.find(h => h.name === name);\n\tconst theme = writable(getCurrentTheme(_current));\n\n\tsetContext('theme', { theme });\n\tsetContext('gallery', gallery);\n\n\tonMount(() => {\n    \tsetRootColors(getCurrentTheme(_current))\n  \t});\n\n\tconst setRootColors = theme => {\n\t\tfor (let [prop, color] of Object.entries(theme.colors)) {\n\t\tlet varString = `--theme-${prop}`\n\t\tdocument.documentElement.style.setProperty(varString, color)\n\t\t}\n\t\tdocument.documentElement.style.setProperty('--theme-name', theme.name)\n\t}\n\tconst router = new Router({\n\t\tmode: 'hash',\n\t\troot: '/'\n\t});\n\n\trouter\n\t\t.add(/gallery\\/(.*)/, folderId => {\n\t\t\tprojectId = folderId;\n\t\t\tpage = ProjectView;\n\t\t}) \n\t\t.add('/\\//', () => {\n\t\t\t\n\t\t})\n\t\t.add('', () => {\n\t\t\tpage = GalleryView;\n\t\t});\n\n</script>\n\n<Head/>\n<Header/>\n\n<section class='content'>\n\t<div class=\"wrap d-flex\">\n\t\t<GalleryNav/>\n\t\t<!-- <Gallery/> -->\n\t\t<svelte:component this={page} params={projectId}/>\n\t</div>\n</section>\n\n<style global type=\"text/scss\">\n\t.d-flex {\n\t\tdisplay: flex;\n\t}\n\t.wrap {\n\t\tmax-width: var(--theme-lWidth);\n\t\tmargin: 0 auto; \n\t}\n\t.layout {\n\t\tpadding: 10px;\n\t\t&__title {\n\t\t\tfont-family: var(--theme-mainFF);\n\t\t\ttext-transform: uppercase;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\ta, p, a:visited {\n\t\tcolor: var(--theme-mainFontColor);\n\t}\n</style>","import App from './App.svelte';\nimport { gallery } from './gallery-config.js';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tgallery\n\t}\n});\n\nexport default app;","export const gallery = [ \n        {   \n            id: 'Alena',\n            pics:[\n                '21d12972446587.5be80661ee5de', \n                '94ab4872446587.5be80661eb31f',\n                '731cd172446587.5be80661ed113',\n                'cb41ff72446587.5be80661ef168',\n                'd427e572446587.5be80661ec4a0',\n                'de1fb772446587.5be80661ee08d'\n            ]\n        },\n        {\n            id: 'Anzhelika',\n            pics: [\n                '9a4c6d93547873.5e67b44e23267',\n                '965bba93547873.5e67b44eaebc1',\n                '62302c93547873.5e67b44e22b03',\n                'efa85a93547873.5e67b44eaf355'\n            ]\n        },\n        {\n            id: 'Yaroslav',\n            pics: ['0de72e93547349.5e67b25c975a4','31fe0d93547349.5e67b25b810c8','738a6f93547349.5e67b25b809df']\n        },\n        {\n            id: 'Liza',\n            pics: ['03d33a72446415.5e67b34464307','5c923472446415.5e67b3459db47','11cf5f72446415.5e67b34536cb2']\n        }\n];"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","get_current_component","Error","onDestroy","$$","on_destroy","push","setContext","key","context","set","getContext","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","Map","callbacks","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","subscribe","invalidate","subscriber","themes","colors","hoverColor","mainFontColor","mainFF","lWidth","hoveredProject","id","gallery","setHoveredProject","hoverIndex","pics","params","project","find","el","prevFolder","nextFolder","Router","mode","window","history","pushState","root","path","cb","routes","slice","toString","replace","clearSlashes","decodeURI","location","pathname","search","match","href","clearInterval","interval","setInterval","current","getFragment","some","route","shift","apply","r","page","projectId","_themes","getCurrentTheme","h","theme","setRootColors","prop","color","entries","varString","documentElement","style","setProperty","folderId","ProjectView","GalleryView","body"],"mappings":"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"}